{"version":3,"file":"ng-custom-element.umd.js","sources":["../src/utils.ts","../src/directive.ts","../src/index.ts"],"sourcesContent":["const DIR_PREFIX_REGEXP = /^((?:x|data)[:\\-_])/;\nconst NGCE_ATTR_PREFIX = /^ngce[:\\-_][^:\\-_]+[:\\-_]/;\n\nexport function camelToKebabCase(input: string): string {\n  if (!input || !input.length) {\n    return '';\n  }\n  return input.replace(/[A-Z]/g, m => `-${m.toLowerCase()}`);\n}\n\nexport function getNormalizedPropOrEventName(originalAttrName: string): string {\n  return originalAttrName\n    .toLowerCase()\n    .replace(DIR_PREFIX_REGEXP, '')\n    .replace(NGCE_ATTR_PREFIX, '')\n    .replace(/_(.)/g, (_, g1) => g1.toUpperCase());\n}\n\nexport function pascalToCamelCase(input: string): string {\n  if (!input || !input.length) {\n    return '';\n  }\n  return input[0].toLowerCase() + input.slice(1);\n}\n\nexport function pascalToKebabCase(input: string): string {\n  if (!input || !input.length) {\n    return '';\n  }\n  return camelToKebabCase(pascalToCamelCase(input));\n}\n","import {\n  ExceptionHandlerService,\n  SimplifiedAttributes,\n  SimplifiedCompiledExpression,\n  SimplifiedJQLite,\n  SimplifiedParseService,\n  SimplifiedRootScopeService,\n  SimplifiedScope\n} from './types';\nimport { getNormalizedPropOrEventName } from './utils';\n\nexport const directiveSelector = 'ngCustomElement';\n\nexport const directiveFactory = [\n  '$exceptionHandler',\n  '$parse',\n  '$rootScope',\n  function directiveFactory(\n    $exceptionHandler: ExceptionHandlerService,\n    $parse: SimplifiedParseService,\n    $rootScope: SimplifiedRootScopeService\n  ) {\n    const EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;\n\n    function safelyCall(fn: Function) {\n      try {\n        fn();\n      } catch (error) {\n        $exceptionHandler(error);\n      }\n    }\n\n    return {\n      restrict: 'A',\n      priority: 100,\n      compile: (_: unknown, cAttrs: SimplifiedAttributes) => {\n        // Extract props.\n        const propExprPairs = Object.keys(cAttrs)\n          .filter(attr => attr.startsWith('ngceProp'))\n          .map(\n            (attr): [string, SimplifiedCompiledExpression] => [\n              getNormalizedPropOrEventName(cAttrs.$attr[attr]),\n              $parse(cAttrs[attr])\n            ]\n          );\n\n        // Extract events.\n        const eventExprPairs = Object.keys(cAttrs)\n          .filter(attr => attr.startsWith('ngceOn'))\n          .map(\n            (attr): [string, SimplifiedCompiledExpression] => [\n              getNormalizedPropOrEventName(cAttrs.$attr[attr]),\n              $parse(cAttrs[attr])\n            ]\n          );\n\n        return {\n          pre: (scope: SimplifiedScope, elem: SimplifiedJQLite) => {\n            // Set up property bindings.\n            const unwatchFns = propExprPairs.map(([propName, parsedExpr]) => {\n              if (EVENT_HANDLER_ATTR_REGEXP.test(propName)) {\n                throw new Error(\n                  'Property bindings for HTML DOM event properties are disallowed.'\n                );\n              }\n\n              const setProp = (newValue: any) => elem.prop(propName, newValue);\n\n              setProp(parsedExpr(scope));\n              return scope.$watch(parsedExpr, setProp);\n            });\n\n            elem.on('$destroy', () => unwatchFns.forEach(safelyCall));\n          },\n          post: (scope: SimplifiedScope, elem: SimplifiedJQLite) => {\n            // Set up event bindings.\n            eventExprPairs.forEach(([eventName, parsedExpr]) => {\n              elem.on(eventName, evt => {\n                evt = evt.originalEvent || evt;\n                const callback = parsedExpr.bind(null, scope, { $event: evt });\n\n                if (!$rootScope.$$phase) {\n                  scope.$apply(callback);\n                } else {\n                  safelyCall(callback);\n                }\n              });\n            });\n          }\n        };\n      }\n    };\n  }\n];\n","import { directiveFactory, directiveSelector } from './directive';\n\n/**\n * Register the global AngularJS module\n */\ndeclare const angular: any;\nexport default angular\n  .module('ngCustomElement', [])\n  .directive(directiveSelector, directiveFactory).name;\n"],"names":["DIR_PREFIX_REGEXP","NGCE_ATTR_PREFIX","getNormalizedPropOrEventName","originalAttrName","toLowerCase","replace","_","g1","toUpperCase","directiveFactory","$exceptionHandler","$parse","$rootScope","EVENT_HANDLER_ATTR_REGEXP","safelyCall","fn","error","restrict","priority","compile","cAttrs","propExprPairs","Object","keys","filter","attr","startsWith","map","$attr","eventExprPairs","pre","scope","elem","unwatchFns","_a","propName","parsedExpr","test","Error","setProp","newValue","prop","$watch","on","forEach","post","evt","callback","bind","$event","originalEvent","$$phase","$apply","angular","module","directive","name"],"mappings":"8KAAA,IAAMA,EAAoB,sBACpBC,EAAmB,qCASTC,EAA6BC,GAC3C,OAAOA,EACJC,cACAC,QAAQL,EAAmB,IAC3BK,QAAQJ,EAAkB,IAC1BI,QAAQ,QAAS,SAACC,EAAGC,GAAO,OAAAA,EAAGC,gBCJ7B,IAEMC,EAAmB,CAC9B,oBACA,SACA,aACA,SACEC,EACAC,EACAC,GAEA,IAAMC,EAA4B,0BAElC,SAASC,EAAWC,GAClB,IACEA,UACOC,GACPN,EAAkBM,IAItB,MAAO,CACLC,SAAU,IACVC,SAAU,IACVC,QAAS,SAACb,EAAYc,GAEpB,IAAMC,EAAgBC,OAAOC,KAAKH,GAC/BI,OAAO,SAAAC,GAAQ,OAAAA,EAAKC,WAAW,cAC/BC,IACC,SAACF,GAAiD,MAAA,CAChDvB,EAA6BkB,EAAOQ,MAAMH,IAC1Cd,EAAOS,EAAOK,OAKdI,EAAiBP,OAAOC,KAAKH,GAChCI,OAAO,SAAAC,GAAQ,OAAAA,EAAKC,WAAW,YAC/BC,IACC,SAACF,GAAiD,MAAA,CAChDvB,EAA6BkB,EAAOQ,MAAMH,IAC1Cd,EAAOS,EAAOK,OAIpB,MAAO,CACLK,IAAK,SAACC,EAAwBC,GAE5B,IAAMC,EAAaZ,EAAcM,IAAI,SAACO,OAACC,OAAUC,OAC/C,GAAIvB,EAA0BwB,KAAKF,GACjC,MAAM,IAAIG,MACR,mEAIJ,IAAMC,EAAU,SAACC,GAAkB,OAAAR,EAAKS,KAAKN,EAAUK,IAGvD,OADAD,EAAQH,EAAWL,IACZA,EAAMW,OAAON,EAAYG,KAGlCP,EAAKW,GAAG,WAAY,WAAM,OAAAV,EAAWW,QAAQ9B,MAE/C+B,KAAM,SAACd,EAAwBC,GAE7BH,EAAee,QAAQ,SAACV,OAAYE,OAClCJ,EAAKW,QAAc,SAAAG,GAEjB,IAAMC,EAAWX,EAAWY,KAAK,KAAMjB,EAAO,CAAEkB,OADhDH,EAAMA,EAAII,eAAiBJ,IAGtBlC,EAAWuC,QAGdrC,EAAWiC,GAFXhB,EAAMqB,OAAOL,oBC5EhBM,QACZC,OAAO,kBAAmB,IAC1BC,UDG8B,kBCHD9C,GAAkB+C"}